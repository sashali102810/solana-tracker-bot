const { Telegraf, Markup } = require('telegraf');
const db = require('./db/database');
const { getTransfers } = require('./services/solscan');
const { Connection } = require('@solana/web3.js');

const bot = new Telegraf(process.env.BOT_TOKEN);
const connection = new Connection(process.env.RPC_ENDPOINT);

// ========================
//  ะะปะฐะฒะธะฐัััั ะธ ะธะฝััััะบัะธะธ
// ========================
const mainKeyboard = Markup.keyboard([
  ['โ ะะพะฑะฐะฒะธัั ะบะพัะตะปะตะบ', 'โ๏ธ ะคะธะปัััั'],
  ['๐ ะััะพัะธั ััะฐะฝะทะฐะบัะธะน', 'โ ะะพะผะพัั']
]).resize();

const filterKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('ะะธะฝะธะผะฐะปัะฝะฐั ััะผะผะฐ', 'set_min_amount')],
  [Markup.button.callback('ะะพะฝะบัะตัะฝัะน ะฟะพะปััะฐัะตะปั', 'set_receiver')]
]);

const instructions = {
  add_wallet: `๐ฅ *ะัะฟัะฐะฒััะต ะฐะดัะตั ะบะพัะตะปัะบะฐ Solana*\nะคะพัะผะฐั: 44 ัะธะผะฒะพะปะฐ\nะัะธะผะตั: \`D3ad...Beef\``,
  filters: `โ๏ธ ะัะฑะตัะธัะต ัะธะฟ ัะธะปัััะฐ:`,
  history: `๐ ะฃะบะฐะถะธัะต ะฟะตัะธะพะด ะฒ ะดะฝัั:\nะัะธะผะตั: \`7\``
};

// ========================
//  ะะฑัะฐะฑะพััะธะบะธ ะบะพะผะฐะฝะด
// ========================
bot.start((ctx) => 
  ctx.replyWithMarkdown('๐ *ะะพั ะดะปั ะพััะปะตะถะธะฒะฐะฝะธั ััะฐะฝะทะฐะบัะธะน Solana*', mainKeyboard));

bot.hears('โ ะะพะฑะฐะฒะธัั ะบะพัะตะปะตะบ', (ctx) => 
  ctx.replyWithMarkdown(instructions.add_wallet));

bot.hears('โ๏ธ ะคะธะปัััั', (ctx) => 
  ctx.replyWithMarkdown(instructions.filters, filterKeyboard));

bot.hears('๐ ะััะพัะธั ััะฐะฝะทะฐะบัะธะน', async (ctx) => {
  const history = await db.getHistory(ctx.chat.id);
  ctx.replyWithMarkdown(formatHistory(history), mainKeyboard);
});

// ========================
//  ะะฑัะฐะฑะพััะธะบะธ callback
// ========================
bot.action(/set_(.+)/, (ctx) => {
  const filterType = ctx.match[1];
  ctx.replyWithMarkdown(`ะะฒะตะดะธัะต ${filterType === 'min_amount' ? 'ััะผะผั ะฒ SOL' : 'ะฐะดัะตั ะฟะพะปััะฐัะตะปั'}:`);
});

// ========================
//  ะะฑัะฐะฑะพัะบะฐ ะฒะฒะพะดะฐ ะดะฐะฝะฝัั
// ========================
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  
  // ะะฐะปะธะดะฐัะธั ะฐะดัะตัะฐ
  if (/^[1-9A-HJ-NP-Za-km-z]{44}$/.test(text)) {
    await db.addWallet(ctx.chat.id, text);
    ctx.replyWithMarkdown(`โ ะะพัะตะปะตะบ \`${text.slice(0,5)}...\` ะดะพะฑะฐะฒะปะตะฝ!`, mainKeyboard);
  }
  
  // ะะฑัะฐะฑะพัะบะฐ ัะธะปัััะพะฒ
  else if (ctx.session.waitingFilter) {
    await applyFilter(ctx);
  }
});

// ========================
//  ะะฐะฟััะบ ะฑะพัะฐ
// ========================
bot.launch().then(() => 
  console.log('๐ข ะะพั ะทะฐะฟััะตะฝ ั ะบะฝะพะฟะพัะฝัะผ ะธะฝัะตััะตะนัะพะผ!'));
